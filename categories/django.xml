<?xml version="1.0" encoding="utf-8"?>
<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/"><channel><title>ImportError (django)</title><link>http://k4ml.github.io</link><description></description><atom:link href="http://k4ml.github.io/categories/django.xml" type="application/rss+xml" rel="self"></atom:link><language>en</language><lastBuildDate>Sat, 20 Jun 2015 12:11:37 GMT</lastBuildDate><generator>Nikola &lt;http://getnikola.com/&gt;</generator><docs>http://blogs.law.harvard.edu/tech/rss</docs><item><title>Django: Where does the application start ?</title><link>http://k4ml.github.io/posts/django-where-does-the-application-start.html</link><description>&lt;div&gt;&lt;p&gt;The key to understand any kind of application is to know where does it start. Until
then you'll keep banging your head, shooting in the dark and lastly, at the mercy
of Google when trying to debug or solve any issues you have.&lt;/p&gt;
&lt;p&gt;Majority of web developers don't really know, or even care where actually their application
start. This particularly true for those developing in PHP which abstract most of the web parts
and it appear to developer they just writing a regular command line or desktop application.&lt;/p&gt;
&lt;p&gt;For Django developer, you can probably ignore this throughout your dev carrier but knowing it
will help you a lot in.&lt;/p&gt;
&lt;p&gt;Django application can start (at least) from 2 possible entry point. The first entry point is
through the development server and the second entry point is when you deploy it to production
web server, either &lt;code&gt;mod_wsgi&lt;/code&gt;, &lt;code&gt;gunicorn&lt;/code&gt;, &lt;code&gt;Paste&lt;/code&gt;, &lt;code&gt;Rocket&lt;/code&gt;, &lt;code&gt;Waitress&lt;/code&gt;, &lt;code&gt;Circus&lt;/code&gt; or dozen more
WSGI server you can find on PyPI. I can still remember the day when there's none pure Python
WSGI server exists (except CherryPy) and how I'd really envy Rails's community for having Mongrel.
That day has long gone.&lt;/p&gt;
&lt;p&gt;Let's dive to the first entry point - when you run your django application through the
&lt;code&gt;manage.py runserver&lt;/code&gt; command. Typical django application (as generated) by the &lt;code&gt;startproject&lt;/code&gt; command
has a file called &lt;code&gt;manage.py&lt;/code&gt; at the root of the project directory. This is the file that developer use
to interact with their application, doing things such as running development server, synching database
tables with the models definition, loading/exporting data and so much more.&lt;/p&gt;
&lt;p&gt;If you peek into &lt;code&gt;manage.py&lt;/code&gt;, it's pretty simple actually:-&lt;/p&gt;
&lt;div class="code"&gt;&lt;pre&gt;&lt;span class="c"&gt;#!./bin/python&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;os&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;sys&lt;/span&gt;

&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;__name__&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s"&gt;"__main__"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;environ&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;setdefault&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"DJANGO_SETTINGS_MODULE"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"acara.settings"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;django.core.management&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;execute_from_command_line&lt;/span&gt;

    &lt;span class="n"&gt;execute_from_command_line&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;sys&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;argv&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;They key line here is at line 10 where a function called &lt;code&gt;execute_from_command_line()&lt;/code&gt; being called.
From here we can traverse to module &lt;code&gt;django.core.management&lt;/code&gt; to find out what that function is doing.
If you're sure where the actual module is located, just open the python console and import the module
to inspect it's location:-&lt;/p&gt;
&lt;div class="code"&gt;&lt;pre&gt;&lt;span class="gp"&gt;$&lt;/span&gt; python
&lt;span class="go"&gt;Python 2.7.3 (default, Aug  1 2012, 05:16:07) &lt;/span&gt;
&lt;span class="go"&gt;[GCC 4.6.3] on linux2&lt;/span&gt;
&lt;span class="go"&gt;Type "help", "copyright", "credits" or "license" for more information.&lt;/span&gt;

&lt;span class="gp"&gt;&amp;gt;&lt;/span&gt;&amp;gt;&amp;gt; import django.core.management
&lt;span class="gp"&gt;&amp;gt;&lt;/span&gt;&amp;gt;&amp;gt; django.core.management
&lt;span class="go"&gt;&amp;lt;module 'django.core.management' from '/home../local/lib/...django/core/management/__init__.pyc'&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Now we know that module was in &lt;code&gt;$HOME/local/lib/python2.7/site-packages/django/core/management/__init__.py&lt;/code&gt;.
This one thing I love in python. Everything is explicit. You can easily trace down where things comes from
without even having to understand the whole framework yet. In some other framework or languages where
implicit import is a norm, you'll have hard time tracing down where certain functions or variables comes from
until you know the mechanism of the framework.&lt;/p&gt;
&lt;p&gt;Let's look what inside &lt;code&gt;django.core.management&lt;/code&gt; module. The function &lt;code&gt;execute_from_command_line()&lt;/code&gt; was defined
at the bottom of the source code. It just a wrapper to other function actually.&lt;/p&gt;
&lt;div class="code"&gt;&lt;pre&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;execute_from_command_line&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;argv&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;None&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="sd"&gt;"""&lt;/span&gt;
&lt;span class="sd"&gt;    A simple method that runs a ManagementUtility.&lt;/span&gt;
&lt;span class="sd"&gt;    """&lt;/span&gt;
    &lt;span class="n"&gt;utility&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;ManagementUtility&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;argv&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;utility&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;execute&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;</description><category>django</category><category>wsgi</category><category>learn</category><guid>http://k4ml.github.io/posts/django-where-does-the-application-start.html</guid><pubDate>Sat, 01 Nov 2014 08:00:14 GMT</pubDate></item><item><title>Django: @transaction.commit_manually and accessing db from template</title><link>http://k4ml.github.io/posts/django-transactioncommit_manually-and-accessing-db-from-template.html</link><description>&lt;div&gt;&lt;p&gt;Bumped into this issue twice and because the first time it happened was almost a year ago, in different project, I'd already lost my mental note about it when it happened again for second time. Our views functions are wrapped inside &lt;code&gt;@transaction.commit_manually&lt;/code&gt;, which look like below:-&lt;/p&gt;
&lt;div class="code"&gt;&lt;pre&gt;&lt;span class="nd"&gt;@transaction.commit_manually&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;send_message&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;context&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{}&lt;/span&gt;
    &lt;span class="c"&gt;# do some stuff&lt;/span&gt;
    &lt;span class="n"&gt;transaction&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;commit&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;render&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;'path/to/template.html'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;This work flawlessly until recently, I need to add some logic in the template that need to check certain user's permission, before displaying the part. In the template, it just some function call that access db like:-&lt;/p&gt;
&lt;div class="code"&gt;&lt;pre&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nx"&gt;user.can_see_this&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;a&lt;/span&gt; &lt;span class="n"&gt;href&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"#"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;Some&lt;/span&gt; &lt;span class="k"&gt;link&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="nx"&gt;endif&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Django now raise &lt;code&gt;TransactionManagementError&lt;/code&gt; complaining I have pending commit/rollback. It doesn't make sense because I can verify that the line that executed &lt;code&gt;transaction.commit()&lt;/code&gt; was reached in the views above. Only after reading through &lt;a href="https://code.djangoproject.com/ticket/18080"&gt;this ticket&lt;/a&gt; on django issue tracker, I'd immediately remember the real issue.&lt;/p&gt;
&lt;p&gt;Turn out this caused by new behavior of django transaction in 1.3 and above. Before 1.3, transaction only marked as dirty if we did any write database operation but since 1.3 and above, any database operation will mark the transaction as dirty. So the following code
will work before 1.3:-&lt;/p&gt;
&lt;div class="code"&gt;&lt;pre&gt;&lt;span class="nd"&gt;@transaction.commit_manually&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;sendmessage&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;transaction&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;rollback&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="n"&gt;user&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;User&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;objects&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;pk&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;HttpResponse&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'OK'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;All database operation now will mark the transaction as dirty and since we access the db in template - which happened during render after we called commit(), it obvious now why django complain we unclosed transaction.&lt;/p&gt;
&lt;p&gt;It should be written like below:-&lt;/p&gt;
&lt;div class="code"&gt;&lt;pre&gt;&lt;span class="nd"&gt;@transaction.commit_manually&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;send_message&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;context&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{}&lt;/span&gt;
    &lt;span class="c"&gt;# do some stuff&lt;/span&gt;
    &lt;span class="n"&gt;response&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;render&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;'path/to/template.html'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;transaction&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;commit&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;response&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;</description><category>python</category><category>django</category><category>db</category><category>transaction</category><guid>http://k4ml.github.io/posts/django-transactioncommit_manually-and-accessing-db-from-template.html</guid><pubDate>Mon, 11 Nov 2013 19:37:17 GMT</pubDate></item><item><title>Django From Scratch</title><link>http://k4ml.github.io/posts/django-from-scratch.html</link><description>&lt;div&gt;&lt;div class="contents alert alert-info pull-left topic"&gt;
&lt;p class="first sidebar-title"&gt;Contents&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;&lt;a href="http://k4ml.github.io/posts/django-from-scratch.html#namespace"&gt;Namespace&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://k4ml.github.io/posts/django-from-scratch.html#views"&gt;Views&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://k4ml.github.io/posts/django-from-scratch.html#models"&gt;Models&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;
&lt;p&gt;There are a lot of tutorials out there on Django and the official documentation also has one. For this post, I decided not to go through the typical route on how to get started with django. Let's 'ignore' the best practices and focus on what actually work and hopefully we can learn something along the way. So let's get started by downloading Django itself from the website.&lt;/p&gt;
&lt;p class="more"&gt;&lt;a href="http://k4ml.github.io/posts/django-from-scratch.html"&gt;Read more…&lt;/a&gt;&lt;/p&gt;&lt;/div&gt;</description><category>django</category><category>python</category><guid>http://k4ml.github.io/posts/django-from-scratch.html</guid><pubDate>Sat, 02 Nov 2013 18:34:04 GMT</pubDate></item><item><title>Upgrading to Django 1.5</title><link>http://k4ml.github.io/posts/upgrading-to-django-15.html</link><description>&lt;div&gt;&lt;p&gt;In the process of upgrading our apps to Django 1.5 from 1.4. Discovered the 
following so far:-&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;&lt;a href="https://docs.djangoproject.com/en/dev/releases/1.4/#django-db-models-fields-urlfield-verify-exists"&gt;URLField drop verify_exists 
parameter&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;New url tag syntax - we seem to use the old syntax a lot, fortunately &lt;a href="http://stackoverflow.com/a/15373978/139870"&gt;one line
sed can fix it&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Django form output changed a bit - we have test that check for output like &lt;code&gt;&amp;lt;input id="id_em" type="text" name="em"&lt;/code&gt;. This has changed to &lt;code&gt;&amp;lt;input id="id_em" name="em" size="25" type="text"&lt;/code&gt;. Can't find reference to this though.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;settings.ALLOWED_HOST&lt;/code&gt; now required if &lt;code&gt;DEBUG = False&lt;/code&gt;. Without this settings, you'll
get &lt;a href="http://stackoverflow.com/questions/15128135/django-setting-debug-false-causes-500-error"&gt;500 error without further output in the error log&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;Of course the list of changes lot more but these were the one that affected us.&lt;/p&gt;&lt;/div&gt;</description><category>python</category><category>django</category><guid>http://k4ml.github.io/posts/upgrading-to-django-15.html</guid><pubDate>Wed, 25 Sep 2013 00:21:52 GMT</pubDate></item><item><title>Django The Hard Way</title><link>http://k4ml.github.io/posts/django-the-hard-way.html</link><description>&lt;div&gt;&lt;p&gt;There are a lot of tutorials out there on Django and the official documentation also has one. For this post, I decided not to go through the typical route on how to get started with django. Let's 'ignore' the best practices and focus on what actually work and hopefully we can learn something along the way. So let's get started by downloading Django itself from the website.&lt;/p&gt;
&lt;p class="more"&gt;&lt;a href="http://k4ml.github.io/posts/django-the-hard-way.html"&gt;Read more…&lt;/a&gt;&lt;/p&gt;&lt;/div&gt;</description><category>django</category><category>python</category><category>tutorial</category><guid>http://k4ml.github.io/posts/django-the-hard-way.html</guid><pubDate>Wed, 18 Sep 2013 19:58:40 GMT</pubDate></item></channel></rss>